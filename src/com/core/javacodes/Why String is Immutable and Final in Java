### String Immutability and Finality in Java

### Immutability:
1. **Security**: Strings are used in sensitive operations like authentication. Immutable objects can't be altered once created, ensuring security.
2. **String Pooling**: JVM maintains a string pool to optimize memory. If a string exists, the same reference is used instead of creating a new one, which wouldn't be safe if Strings were mutable.
3. **Thread Safety**: Immutable objects are inherently thread-safe as they can't change state, avoiding data corruption or the need for synchronization.

-- amankk2224
   aman21159 ---

### `final` Keyword:
1. **Prevent Subclassing**: Declaring the String class as `final` prevents it from being subclassed, ensuring the fundamental behavior of String objects remains unchanged.
2. **Performance**: Avoids additional overhead associated with subclassing and method calls, optimizing performance.

### Diagram Explanation

#### String Immutability

1. **Original String Creation**:
   ```java
   String str1 = "Hello";
   ```

   | Memory        | Value |
   |---------------|-------|
   | str1          | Hello |

2. **Attempt to Modify String**:
   ```java
   str1 = "World";
   ```

   | Memory        | Value |
   |---------------|-------|
   | str1 (Old)    | Hello |
   | str1 (New)    | World |

- Instead of modifying the original "Hello" string, a new string "World" is created, and `str1` now references this new string.

#### String Pooling

1. **String Pool Usage**:
   ```java
   String str2 = "Hello";
   ```

   | Memory (String Pool) | Value |
   |----------------------|-------|
   | str1                 | Hello |
   | str2                 | Hello |

- Both `str1` and `str2` reference the same string "Hello" in the string pool, ensuring efficient memory usage.

#### Thread Safety

1. **Immutable String in Multithreading**:
   ```java
   Thread 1: str3 = "Hello";
   Thread 2: str3 = "Hello";
   ```

   | Memory (Thread 1) | Memory (Thread 2) | Value |
   |-------------------|-------------------|-------|
   | str3              | str3              | Hello |

- Both threads reference the same string "Hello," ensuring no data corruption due to immutability.

#### Final Keyword

1. **String Class Declaration**:
   ```java
   public final class String {
       // class body
   }
   ```

- The `final` keyword ensures that no subclass can modify the behavior of the String class, maintaining its integrity and immutability.

### Summary Diagram

Here's a summary diagram:

```
+---------------+           +-------------+  
|  String Pool  |           |   Threads   |  
+---------------+           +-------------+  
| "Hello"       | <-------+ | Thread 1    |  
| "World"       | <------ |  | str3 = "Hello" | 
+---------------+        | |  +-------------+  
                         |  | | Thread 2    | 
                         +---| str3 = "Hello" | 
+---------------+        |  +-------------+  
| Original      | <------+  
| str1 = "Hello" |       |  
|                |       |  
+---------------+       +  
| Modified      | <------+  
| str1 = "World" |  
+---------------+  
```

 /*
    Mein pehle vachan se tumhara haat mangti hun
    Dharm aur pooja mein tumhara saath maangti hun
    Dusre vachan mein na hichkichana , ulajna
    Mere maa baap ko bhi apna samajhna
    Teesre vachan se bhi dono jude ho
    Jawani bhi dekhe aur saathe
    aur saath mein budhe ho
    Chuthe vachan ke liye himmat jutana hoga
    Ab tumhe ghar ka bhaar uthana hoga
    Paanchve vachan mein priye , haa samucha karoge
    Len den kharch aur ghar ke har kaam mein pucha karoge
    chatve vachan do - do sarte h
    ek ek karke uspe baat krte hai
    tum sakhiyon ke samne na mujh par chillaoge
    jue jaise karm dekhte hi dur ho jaonge
    aur tum itne jo pyare ho satva vachan to jaante hi hoge
    Har parayi stree ko , Mata saman maante hi hoge
     */